pipeline {
    agent any   // la directiva "agent" instruye a jenkins de alocar un ejecutor (node) y workspace para la Pipeline 

    environment {   // la section environment es usada para almacenar y declarar todas las 
                    // variables de entorno de nuestra pipeline

        VAR_NAME='value' // se declara igual que una variable en Linux
    }

    stages {    // "stages" se podria decir que es un codeblock donde viviran los "stage"
        
        stage('Build') {    // "stage" una etapa del pipeline, en este caso la etapa "Build", puede haber muchos mas "stages"
            
            steps {     // la secccion "step" define una serie de acciones a ejecutar dentro en una directiva "stage"
                
                cleanWs() // "cleanWs()" es una funcion que limpia el worksapce de nuestra pipeline
                
                echo 'Building a new laptop...'
                
                sh 'mkdir -p build' // "sh o shell step" es usado para ejecutar un shell command

                sh '''              
                    echo "comando 1"
                    echo "comando 2"
                '''                 // para combinar muchos comandos 'sh' en uno solo se puede usar el anterior formato 
                                    // con los " ''' "
            }
        }

        stage('test') {     // otra stage, la stages se corren sincronicamente
            ...
        }
    }
    
    post { // "post", es una seccion donde van todos los post actions, esta seccion se ejecuta siempre al final de 
           // la pipeline

        success {   // "success" es un post action que solo se ejectua cuando la pipeline sea ha completado con exito


         archiveArtifacts artifacts: 'build/**'     // "arcvhieArtifacts" guarda los archivos built que incluyen el 
                                                    // patron proveido, en este caso "build/**", en el jenkins controller
                                                    // para que su extraccion despues                              
        }
    }
}
